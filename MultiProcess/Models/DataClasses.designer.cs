#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MultiProcess.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aisgorod")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertDataBase(DataBase instance);
    partial void UpdateDataBase(DataBase instance);
    partial void DeleteDataBase(DataBase instance);
    partial void InsertOrganizations(Organizations instance);
    partial void UpdateOrganizations(Organizations instance);
    partial void DeleteOrganizations(Organizations instance);
    partial void InsertProcessWorkBases(ProcessWorkBases instance);
    partial void UpdateProcessWorkBases(ProcessWorkBases instance);
    partial void DeleteProcessWorkBases(ProcessWorkBases instance);
    partial void InsertTranscript(Transcript instance);
    partial void UpdateTranscript(Transcript instance);
    partial void DeleteTranscript(Transcript instance);
    partial void InsertWorks(Works instance);
    partial void UpdateWorks(Works instance);
    partial void DeleteWorks(Works instance);
    partial void InsertWorkType(WorkType instance);
    partial void UpdateWorkType(WorkType instance);
    partial void DeleteWorkType(WorkType instance);
    partial void InsertOrganizationBases(OrganizationBases instance);
    partial void UpdateOrganizationBases(OrganizationBases instance);
    partial void DeleteOrganizationBases(OrganizationBases instance);
    partial void InsertProcessStatus(ProcessStatus instance);
    partial void UpdateProcessStatus(ProcessStatus instance);
    partial void DeleteProcessStatus(ProcessStatus instance);
    partial void InsertProcessWorks(ProcessWorks instance);
    partial void UpdateProcessWorks(ProcessWorks instance);
    partial void DeleteProcessWorks(ProcessWorks instance);
    partial void InsertProcessWorkBaseDetails(ProcessWorkBaseDetails instance);
    partial void UpdateProcessWorkBaseDetails(ProcessWorkBaseDetails instance);
    partial void DeleteProcessWorkBaseDetails(ProcessWorkBaseDetails instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["aisgorodConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<OrganizationsView> OrganizationsView
		{
			get
			{
				return this.GetTable<OrganizationsView>();
			}
		}
		
		public System.Data.Linq.Table<TrWorkView> TrWorkView
		{
			get
			{
				return this.GetTable<TrWorkView>();
			}
		}
		
		public System.Data.Linq.Table<ListView> ListView
		{
			get
			{
				return this.GetTable<ListView>();
			}
		}
		
		public System.Data.Linq.Table<WorksView> WorksView
		{
			get
			{
				return this.GetTable<WorksView>();
			}
		}
		
		public System.Data.Linq.Table<DataBase> DataBase
		{
			get
			{
				return this.GetTable<DataBase>();
			}
		}
		
		public System.Data.Linq.Table<Organizations> Organizations
		{
			get
			{
				return this.GetTable<Organizations>();
			}
		}
		
		public System.Data.Linq.Table<ProcessWorkBases> ProcessWorkBases
		{
			get
			{
				return this.GetTable<ProcessWorkBases>();
			}
		}
		
		public System.Data.Linq.Table<Transcript> Transcript
		{
			get
			{
				return this.GetTable<Transcript>();
			}
		}
		
		public System.Data.Linq.Table<Works> Works
		{
			get
			{
				return this.GetTable<Works>();
			}
		}
		
		public System.Data.Linq.Table<WorkType> WorkType
		{
			get
			{
				return this.GetTable<WorkType>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationBases> OrganizationBases
		{
			get
			{
				return this.GetTable<OrganizationBases>();
			}
		}
		
		public System.Data.Linq.Table<ProcessStatus> ProcessStatus
		{
			get
			{
				return this.GetTable<ProcessStatus>();
			}
		}
		
		public System.Data.Linq.Table<FullView> FullView
		{
			get
			{
				return this.GetTable<FullView>();
			}
		}
		
		public System.Data.Linq.Table<SqlProcedureView> SqlProcedureView
		{
			get
			{
				return this.GetTable<SqlProcedureView>();
			}
		}
		
		public System.Data.Linq.Table<ProcessWorks> ProcessWorks
		{
			get
			{
				return this.GetTable<ProcessWorks>();
			}
		}
		
		public System.Data.Linq.Table<ProcessWorkBaseDetails> ProcessWorkBaseDetails
		{
			get
			{
				return this.GetTable<ProcessWorkBaseDetails>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetDataBase")]
		public int GetDataBase([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string iPadress, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string dataBaseName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iPadress, dataBaseName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetOrganization")]
		public int GetOrganization([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string orgName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orgName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetOrganizationBases")]
		public int GetOrganizationBases([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> orgId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> baseId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orgId, baseId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetWorkProc")]
		public int GetWorkProc([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string sqlProcedure)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, sqlProcedure);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetWorkOrg")]
		public int GetWorkOrg([global::System.Data.Linq.Mapping.ParameterAttribute(Name="WorkTypeId", DbType="BigInt")] System.Nullable<long> workTypeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OrgId", DbType="BigInt")] System.Nullable<long> orgId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), workTypeId, orgId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetWorkTr")]
		public int GetWorkTr([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetTranscript")]
		public int GetTranscript([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string trName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> workId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trName, workId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetWork", IsComposable=true)]
		public IQueryable<GetWorkResult> GetWork([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Orgid", DbType="BigInt")] System.Nullable<long> orgid)
		{
			return this.CreateMethodCallQuery<GetWorkResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orgid);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FullProcessWorks")]
		public int FullProcessWorks([global::System.Data.Linq.Mapping.ParameterAttribute(Name="WorkId", DbType="BigInt")] System.Nullable<long> workId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> period, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> created)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), workId, period, created);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="mp.GetWorkId", IsComposable=true)]
		public System.Nullable<int> GetWorkId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="WorkId", DbType="BigInt")] System.Nullable<long> workId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> period, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> created)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), workId, period, created).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetProcedure1")]
		public ISingleResult<GetProcedure1Result> GetProcedure1([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Period", DbType="DateTime")] System.Nullable<System.DateTime> period)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), period);
			return ((ISingleResult<GetProcedure1Result>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetProcedure")]
		public ISingleResult<GetProcedureResult> GetProcedure([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Period", DbType="DateTime")] System.Nullable<System.DateTime> period)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), period);
			return ((ISingleResult<GetProcedureResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SaveValueToProcessWorkBases")]
		public int SaveValueToProcessWorkBases([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> idd, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> value, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> countOrgBases)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idd, value, countOrgBases);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SaveValueToProcessWorkBaseDetails")]
		public int SaveValueToProcessWorkBaseDetails([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string detaleName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> value, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> period)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, detaleName, value, period);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FullProcessWorkBases")]
		public int FullProcessWorkBases([global::System.Data.Linq.Mapping.ParameterAttribute(Name="WorkId", DbType="BigInt")] System.Nullable<long> workId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BaseId", DbType="BigInt")] System.Nullable<long> baseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> period)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), workId, baseId, period);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationsView")]
	public partial class OrganizationsView
	{
		
		private string _iPadress;
		
		private string _dataBaseName;
		
		private string _orgName;
		
		public OrganizationsView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPadress", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string iPadress
		{
			get
			{
				return this._iPadress;
			}
			set
			{
				if ((this._iPadress != value))
				{
					this._iPadress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dataBaseName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string dataBaseName
		{
			get
			{
				return this._dataBaseName;
			}
			set
			{
				if ((this._dataBaseName != value))
				{
					this._dataBaseName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orgName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string orgName
		{
			get
			{
				return this._orgName;
			}
			set
			{
				if ((this._orgName != value))
				{
					this._orgName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrWorkView")]
	public partial class TrWorkView
	{
		
		private string _trName;
		
		private long _workId;
		
		private System.Nullable<long> _workTypeId;
		
		private string _name;
		
		public TrWorkView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string trName
		{
			get
			{
				return this._trName;
			}
			set
			{
				if ((this._trName != value))
				{
					this._trName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workId", DbType="BigInt NOT NULL")]
		public long workId
		{
			get
			{
				return this._workId;
			}
			set
			{
				if ((this._workId != value))
				{
					this._workId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workTypeId", DbType="BigInt")]
		public System.Nullable<long> workTypeId
		{
			get
			{
				return this._workTypeId;
			}
			set
			{
				if ((this._workTypeId != value))
				{
					this._workTypeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ListView")]
	public partial class ListView
	{
		
		private string _orgName;
		
		private string _name;
		
		private string _sqlProcedure;
		
		private string _dataBaseName;
		
		private string _iPadress;
		
		private string _trName;
		
		public ListView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orgName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string orgName
		{
			get
			{
				return this._orgName;
			}
			set
			{
				if ((this._orgName != value))
				{
					this._orgName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sqlProcedure", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string sqlProcedure
		{
			get
			{
				return this._sqlProcedure;
			}
			set
			{
				if ((this._sqlProcedure != value))
				{
					this._sqlProcedure = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dataBaseName", DbType="NVarChar(100)")]
		public string dataBaseName
		{
			get
			{
				return this._dataBaseName;
			}
			set
			{
				if ((this._dataBaseName != value))
				{
					this._dataBaseName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPadress", DbType="NChar(100)")]
		public string iPadress
		{
			get
			{
				return this._iPadress;
			}
			set
			{
				if ((this._iPadress != value))
				{
					this._iPadress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trName", DbType="NVarChar(100)")]
		public string trName
		{
			get
			{
				return this._trName;
			}
			set
			{
				if ((this._trName != value))
				{
					this._trName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorksView")]
	public partial class WorksView
	{
		
		private string _name;
		
		private string _sqlProcedure;
		
		private string _orgName;
		
		private string _dataBaseName;
		
		private string _iPadress;
		
		public WorksView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sqlProcedure", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string sqlProcedure
		{
			get
			{
				return this._sqlProcedure;
			}
			set
			{
				if ((this._sqlProcedure != value))
				{
					this._sqlProcedure = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orgName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string orgName
		{
			get
			{
				return this._orgName;
			}
			set
			{
				if ((this._orgName != value))
				{
					this._orgName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dataBaseName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string dataBaseName
		{
			get
			{
				return this._dataBaseName;
			}
			set
			{
				if ((this._dataBaseName != value))
				{
					this._dataBaseName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPadress", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string iPadress
		{
			get
			{
				return this._iPadress;
			}
			set
			{
				if ((this._iPadress != value))
				{
					this._iPadress = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="mp.[DataBase]")]
	public partial class DataBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _iPadress;
		
		private string _dataBaseName;
		
		private EntitySet<OrganizationBases> _OrganizationBases;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OniPadressChanging(string value);
    partial void OniPadressChanged();
    partial void OndataBaseNameChanging(string value);
    partial void OndataBaseNameChanged();
    #endregion
		
		public DataBase()
		{
			this._OrganizationBases = new EntitySet<OrganizationBases>(new Action<OrganizationBases>(this.attach_OrganizationBases), new Action<OrganizationBases>(this.detach_OrganizationBases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPadress", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string iPadress
		{
			get
			{
				return this._iPadress;
			}
			set
			{
				if ((this._iPadress != value))
				{
					this.OniPadressChanging(value);
					this.SendPropertyChanging();
					this._iPadress = value;
					this.SendPropertyChanged("iPadress");
					this.OniPadressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dataBaseName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string dataBaseName
		{
			get
			{
				return this._dataBaseName;
			}
			set
			{
				if ((this._dataBaseName != value))
				{
					this.OndataBaseNameChanging(value);
					this.SendPropertyChanging();
					this._dataBaseName = value;
					this.SendPropertyChanged("dataBaseName");
					this.OndataBaseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataBase_OrganizationBases", Storage="_OrganizationBases", ThisKey="id", OtherKey="orgId")]
		public EntitySet<OrganizationBases> OrganizationBases
		{
			get
			{
				return this._OrganizationBases;
			}
			set
			{
				this._OrganizationBases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrganizationBases(OrganizationBases entity)
		{
			this.SendPropertyChanging();
			entity.DataBase = this;
		}
		
		private void detach_OrganizationBases(OrganizationBases entity)
		{
			this.SendPropertyChanging();
			entity.DataBase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="mp.Organizations")]
	public partial class Organizations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _orgName;
		
		private EntitySet<Works> _Works;
		
		private EntitySet<OrganizationBases> _OrganizationBases;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnorgNameChanging(string value);
    partial void OnorgNameChanged();
    #endregion
		
		public Organizations()
		{
			this._Works = new EntitySet<Works>(new Action<Works>(this.attach_Works), new Action<Works>(this.detach_Works));
			this._OrganizationBases = new EntitySet<OrganizationBases>(new Action<OrganizationBases>(this.attach_OrganizationBases), new Action<OrganizationBases>(this.detach_OrganizationBases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orgName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string orgName
		{
			get
			{
				return this._orgName;
			}
			set
			{
				if ((this._orgName != value))
				{
					this.OnorgNameChanging(value);
					this.SendPropertyChanging();
					this._orgName = value;
					this.SendPropertyChanged("orgName");
					this.OnorgNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organizations_Works", Storage="_Works", ThisKey="id", OtherKey="orgId")]
		public EntitySet<Works> Works
		{
			get
			{
				return this._Works;
			}
			set
			{
				this._Works.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organizations_OrganizationBases", Storage="_OrganizationBases", ThisKey="id", OtherKey="orgId")]
		public EntitySet<OrganizationBases> OrganizationBases
		{
			get
			{
				return this._OrganizationBases;
			}
			set
			{
				this._OrganizationBases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Works(Works entity)
		{
			this.SendPropertyChanging();
			entity.Organizations = this;
		}
		
		private void detach_Works(Works entity)
		{
			this.SendPropertyChanging();
			entity.Organizations = null;
		}
		
		private void attach_OrganizationBases(OrganizationBases entity)
		{
			this.SendPropertyChanging();
			entity.Organizations = this;
		}
		
		private void detach_OrganizationBases(OrganizationBases entity)
		{
			this.SendPropertyChanging();
			entity.Organizations = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="mp.ProcessWorkBases")]
	public partial class ProcessWorkBases : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _processWorkId;
		
		private System.Nullable<long> _organizationBaseId;
		
		private System.Nullable<long> _value;
		
		private long _statusId;
		
		private string _error;
		
		private string _comment;
		
		private System.DateTime _created;
		
		private EntitySet<ProcessWorkBaseDetails> _ProcessWorkBaseDetails;
		
		private EntityRef<ProcessStatus> _ProcessStatus;
		
		private EntityRef<ProcessWorks> _ProcessWorks;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnprocessWorkIdChanging(long value);
    partial void OnprocessWorkIdChanged();
    partial void OnorganizationBaseIdChanging(System.Nullable<long> value);
    partial void OnorganizationBaseIdChanged();
    partial void OnvalueChanging(System.Nullable<long> value);
    partial void OnvalueChanged();
    partial void OnstatusIdChanging(long value);
    partial void OnstatusIdChanged();
    partial void OnerrorChanging(string value);
    partial void OnerrorChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    #endregion
		
		public ProcessWorkBases()
		{
			this._ProcessWorkBaseDetails = new EntitySet<ProcessWorkBaseDetails>(new Action<ProcessWorkBaseDetails>(this.attach_ProcessWorkBaseDetails), new Action<ProcessWorkBaseDetails>(this.detach_ProcessWorkBaseDetails));
			this._ProcessStatus = default(EntityRef<ProcessStatus>);
			this._ProcessWorks = default(EntityRef<ProcessWorks>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_processWorkId", DbType="BigInt NOT NULL")]
		public long processWorkId
		{
			get
			{
				return this._processWorkId;
			}
			set
			{
				if ((this._processWorkId != value))
				{
					if (this._ProcessWorks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprocessWorkIdChanging(value);
					this.SendPropertyChanging();
					this._processWorkId = value;
					this.SendPropertyChanged("processWorkId");
					this.OnprocessWorkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_organizationBaseId", DbType="BigInt")]
		public System.Nullable<long> organizationBaseId
		{
			get
			{
				return this._organizationBaseId;
			}
			set
			{
				if ((this._organizationBaseId != value))
				{
					this.OnorganizationBaseIdChanging(value);
					this.SendPropertyChanging();
					this._organizationBaseId = value;
					this.SendPropertyChanged("organizationBaseId");
					this.OnorganizationBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="BigInt")]
		public System.Nullable<long> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusId", DbType="BigInt NOT NULL")]
		public long statusId
		{
			get
			{
				return this._statusId;
			}
			set
			{
				if ((this._statusId != value))
				{
					if (this._ProcessStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIdChanging(value);
					this.SendPropertyChanging();
					this._statusId = value;
					this.SendPropertyChanged("statusId");
					this.OnstatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_error", DbType="VarChar(MAX)")]
		public string error
		{
			get
			{
				return this._error;
			}
			set
			{
				if ((this._error != value))
				{
					this.OnerrorChanging(value);
					this.SendPropertyChanging();
					this._error = value;
					this.SendPropertyChanged("error");
					this.OnerrorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessWorkBases_ProcessWorkBaseDetails", Storage="_ProcessWorkBaseDetails", ThisKey="id", OtherKey="processWorkBaseId")]
		public EntitySet<ProcessWorkBaseDetails> ProcessWorkBaseDetails
		{
			get
			{
				return this._ProcessWorkBaseDetails;
			}
			set
			{
				this._ProcessWorkBaseDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessStatus_ProcessWorkBases", Storage="_ProcessStatus", ThisKey="statusId", OtherKey="id", IsForeignKey=true)]
		public ProcessStatus ProcessStatus
		{
			get
			{
				return this._ProcessStatus.Entity;
			}
			set
			{
				ProcessStatus previousValue = this._ProcessStatus.Entity;
				if (((previousValue != value) 
							|| (this._ProcessStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProcessStatus.Entity = null;
						previousValue.ProcessWorkBases.Remove(this);
					}
					this._ProcessStatus.Entity = value;
					if ((value != null))
					{
						value.ProcessWorkBases.Add(this);
						this._statusId = value.id;
					}
					else
					{
						this._statusId = default(long);
					}
					this.SendPropertyChanged("ProcessStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessWorks_ProcessWorkBases", Storage="_ProcessWorks", ThisKey="processWorkId", OtherKey="id", IsForeignKey=true)]
		public ProcessWorks ProcessWorks
		{
			get
			{
				return this._ProcessWorks.Entity;
			}
			set
			{
				ProcessWorks previousValue = this._ProcessWorks.Entity;
				if (((previousValue != value) 
							|| (this._ProcessWorks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProcessWorks.Entity = null;
						previousValue.ProcessWorkBases.Remove(this);
					}
					this._ProcessWorks.Entity = value;
					if ((value != null))
					{
						value.ProcessWorkBases.Add(this);
						this._processWorkId = value.id;
					}
					else
					{
						this._processWorkId = default(long);
					}
					this.SendPropertyChanged("ProcessWorks");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProcessWorkBaseDetails(ProcessWorkBaseDetails entity)
		{
			this.SendPropertyChanging();
			entity.ProcessWorkBases = this;
		}
		
		private void detach_ProcessWorkBaseDetails(ProcessWorkBaseDetails entity)
		{
			this.SendPropertyChanging();
			entity.ProcessWorkBases = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="mp.Transcript")]
	public partial class Transcript : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _trName;
		
		private long _workId;
		
		private System.Nullable<long> _value;
		
		private EntityRef<Works> _Works;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntrNameChanging(string value);
    partial void OntrNameChanged();
    partial void OnworkIdChanging(long value);
    partial void OnworkIdChanged();
    partial void OnvalueChanging(System.Nullable<long> value);
    partial void OnvalueChanged();
    #endregion
		
		public Transcript()
		{
			this._Works = default(EntityRef<Works>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string trName
		{
			get
			{
				return this._trName;
			}
			set
			{
				if ((this._trName != value))
				{
					this.OntrNameChanging(value);
					this.SendPropertyChanging();
					this._trName = value;
					this.SendPropertyChanged("trName");
					this.OntrNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workId", DbType="BigInt NOT NULL")]
		public long workId
		{
			get
			{
				return this._workId;
			}
			set
			{
				if ((this._workId != value))
				{
					if (this._Works.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnworkIdChanging(value);
					this.SendPropertyChanging();
					this._workId = value;
					this.SendPropertyChanged("workId");
					this.OnworkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="BigInt")]
		public System.Nullable<long> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Works_Transcript", Storage="_Works", ThisKey="workId", OtherKey="id", IsForeignKey=true)]
		public Works Works
		{
			get
			{
				return this._Works.Entity;
			}
			set
			{
				Works previousValue = this._Works.Entity;
				if (((previousValue != value) 
							|| (this._Works.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Works.Entity = null;
						previousValue.Transcript.Remove(this);
					}
					this._Works.Entity = value;
					if ((value != null))
					{
						value.Transcript.Add(this);
						this._workId = value.id;
					}
					else
					{
						this._workId = default(long);
					}
					this.SendPropertyChanged("Works");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="mp.Works")]
	public partial class Works : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _workTypeId;
		
		private long _orgId;
		
		private string _launchType;
		
		private System.Nullable<System.DateTime> _launchData;
		
		private EntitySet<Transcript> _Transcript;
		
		private EntityRef<Organizations> _Organizations;
		
		private EntityRef<WorkType> _WorkType;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnworkTypeIdChanging(System.Nullable<long> value);
    partial void OnworkTypeIdChanged();
    partial void OnorgIdChanging(long value);
    partial void OnorgIdChanged();
    partial void OnlaunchTypeChanging(string value);
    partial void OnlaunchTypeChanged();
    partial void OnlaunchDataChanging(System.Nullable<System.DateTime> value);
    partial void OnlaunchDataChanged();
    #endregion
		
		public Works()
		{
			this._Transcript = new EntitySet<Transcript>(new Action<Transcript>(this.attach_Transcript), new Action<Transcript>(this.detach_Transcript));
			this._Organizations = default(EntityRef<Organizations>);
			this._WorkType = default(EntityRef<WorkType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workTypeId", DbType="BigInt")]
		public System.Nullable<long> workTypeId
		{
			get
			{
				return this._workTypeId;
			}
			set
			{
				if ((this._workTypeId != value))
				{
					if (this._WorkType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnworkTypeIdChanging(value);
					this.SendPropertyChanging();
					this._workTypeId = value;
					this.SendPropertyChanged("workTypeId");
					this.OnworkTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orgId", DbType="BigInt NOT NULL")]
		public long orgId
		{
			get
			{
				return this._orgId;
			}
			set
			{
				if ((this._orgId != value))
				{
					if (this._Organizations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorgIdChanging(value);
					this.SendPropertyChanging();
					this._orgId = value;
					this.SendPropertyChanged("orgId");
					this.OnorgIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_launchType", DbType="VarChar(50)")]
		public string launchType
		{
			get
			{
				return this._launchType;
			}
			set
			{
				if ((this._launchType != value))
				{
					this.OnlaunchTypeChanging(value);
					this.SendPropertyChanging();
					this._launchType = value;
					this.SendPropertyChanged("launchType");
					this.OnlaunchTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_launchData", DbType="DateTime")]
		public System.Nullable<System.DateTime> launchData
		{
			get
			{
				return this._launchData;
			}
			set
			{
				if ((this._launchData != value))
				{
					this.OnlaunchDataChanging(value);
					this.SendPropertyChanging();
					this._launchData = value;
					this.SendPropertyChanged("launchData");
					this.OnlaunchDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Works_Transcript", Storage="_Transcript", ThisKey="id", OtherKey="workId")]
		public EntitySet<Transcript> Transcript
		{
			get
			{
				return this._Transcript;
			}
			set
			{
				this._Transcript.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organizations_Works", Storage="_Organizations", ThisKey="orgId", OtherKey="id", IsForeignKey=true)]
		public Organizations Organizations
		{
			get
			{
				return this._Organizations.Entity;
			}
			set
			{
				Organizations previousValue = this._Organizations.Entity;
				if (((previousValue != value) 
							|| (this._Organizations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organizations.Entity = null;
						previousValue.Works.Remove(this);
					}
					this._Organizations.Entity = value;
					if ((value != null))
					{
						value.Works.Add(this);
						this._orgId = value.id;
					}
					else
					{
						this._orgId = default(long);
					}
					this.SendPropertyChanged("Organizations");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkType_Works", Storage="_WorkType", ThisKey="workTypeId", OtherKey="id", IsForeignKey=true)]
		public WorkType WorkType
		{
			get
			{
				return this._WorkType.Entity;
			}
			set
			{
				WorkType previousValue = this._WorkType.Entity;
				if (((previousValue != value) 
							|| (this._WorkType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkType.Entity = null;
						previousValue.Works.Remove(this);
					}
					this._WorkType.Entity = value;
					if ((value != null))
					{
						value.Works.Add(this);
						this._workTypeId = value.id;
					}
					else
					{
						this._workTypeId = default(Nullable<long>);
					}
					this.SendPropertyChanged("WorkType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transcript(Transcript entity)
		{
			this.SendPropertyChanging();
			entity.Works = this;
		}
		
		private void detach_Transcript(Transcript entity)
		{
			this.SendPropertyChanging();
			entity.Works = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="mp.WorkType")]
	public partial class WorkType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private string _sqlProcedure;
		
		private System.Nullable<long> _baseId;
		
		private EntitySet<Works> _Works;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsqlProcedureChanging(string value);
    partial void OnsqlProcedureChanged();
    partial void OnbaseIdChanging(System.Nullable<long> value);
    partial void OnbaseIdChanged();
    #endregion
		
		public WorkType()
		{
			this._Works = new EntitySet<Works>(new Action<Works>(this.attach_Works), new Action<Works>(this.detach_Works));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sqlProcedure", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string sqlProcedure
		{
			get
			{
				return this._sqlProcedure;
			}
			set
			{
				if ((this._sqlProcedure != value))
				{
					this.OnsqlProcedureChanging(value);
					this.SendPropertyChanging();
					this._sqlProcedure = value;
					this.SendPropertyChanged("sqlProcedure");
					this.OnsqlProcedureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_baseId", DbType="BigInt")]
		public System.Nullable<long> baseId
		{
			get
			{
				return this._baseId;
			}
			set
			{
				if ((this._baseId != value))
				{
					this.OnbaseIdChanging(value);
					this.SendPropertyChanging();
					this._baseId = value;
					this.SendPropertyChanged("baseId");
					this.OnbaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkType_Works", Storage="_Works", ThisKey="id", OtherKey="workTypeId")]
		public EntitySet<Works> Works
		{
			get
			{
				return this._Works;
			}
			set
			{
				this._Works.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Works(Works entity)
		{
			this.SendPropertyChanging();
			entity.WorkType = this;
		}
		
		private void detach_Works(Works entity)
		{
			this.SendPropertyChanging();
			entity.WorkType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="mp.OrganizationBases")]
	public partial class OrganizationBases : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _orgId;
		
		private long _baseId;
		
		private EntityRef<DataBase> _DataBase;
		
		private EntityRef<Organizations> _Organizations;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnorgIdChanging(long value);
    partial void OnorgIdChanged();
    partial void OnbaseIdChanging(long value);
    partial void OnbaseIdChanged();
    #endregion
		
		public OrganizationBases()
		{
			this._DataBase = default(EntityRef<DataBase>);
			this._Organizations = default(EntityRef<Organizations>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orgId", DbType="BigInt NOT NULL")]
		public long orgId
		{
			get
			{
				return this._orgId;
			}
			set
			{
				if ((this._orgId != value))
				{
					if ((this._DataBase.HasLoadedOrAssignedValue || this._Organizations.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorgIdChanging(value);
					this.SendPropertyChanging();
					this._orgId = value;
					this.SendPropertyChanged("orgId");
					this.OnorgIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_baseId", DbType="BigInt NOT NULL")]
		public long baseId
		{
			get
			{
				return this._baseId;
			}
			set
			{
				if ((this._baseId != value))
				{
					this.OnbaseIdChanging(value);
					this.SendPropertyChanging();
					this._baseId = value;
					this.SendPropertyChanged("baseId");
					this.OnbaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataBase_OrganizationBases", Storage="_DataBase", ThisKey="orgId", OtherKey="id", IsForeignKey=true)]
		public DataBase DataBase
		{
			get
			{
				return this._DataBase.Entity;
			}
			set
			{
				DataBase previousValue = this._DataBase.Entity;
				if (((previousValue != value) 
							|| (this._DataBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataBase.Entity = null;
						previousValue.OrganizationBases.Remove(this);
					}
					this._DataBase.Entity = value;
					if ((value != null))
					{
						value.OrganizationBases.Add(this);
						this._orgId = value.id;
					}
					else
					{
						this._orgId = default(long);
					}
					this.SendPropertyChanged("DataBase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organizations_OrganizationBases", Storage="_Organizations", ThisKey="orgId", OtherKey="id", IsForeignKey=true)]
		public Organizations Organizations
		{
			get
			{
				return this._Organizations.Entity;
			}
			set
			{
				Organizations previousValue = this._Organizations.Entity;
				if (((previousValue != value) 
							|| (this._Organizations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organizations.Entity = null;
						previousValue.OrganizationBases.Remove(this);
					}
					this._Organizations.Entity = value;
					if ((value != null))
					{
						value.OrganizationBases.Add(this);
						this._orgId = value.id;
					}
					else
					{
						this._orgId = default(long);
					}
					this.SendPropertyChanged("Organizations");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="mp.ProcessStatus")]
	public partial class ProcessStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private EntitySet<ProcessWorkBases> _ProcessWorkBases;
		
		private EntityRef<ProcessStatus> _ProcessStatus2;
		
		private EntitySet<ProcessWorks> _ProcessWorks;
		
		private EntityRef<ProcessStatus> _ProcessStatus1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public ProcessStatus()
		{
			this._ProcessWorkBases = new EntitySet<ProcessWorkBases>(new Action<ProcessWorkBases>(this.attach_ProcessWorkBases), new Action<ProcessWorkBases>(this.detach_ProcessWorkBases));
			this._ProcessStatus2 = default(EntityRef<ProcessStatus>);
			this._ProcessWorks = new EntitySet<ProcessWorks>(new Action<ProcessWorks>(this.attach_ProcessWorks), new Action<ProcessWorks>(this.detach_ProcessWorks));
			this._ProcessStatus1 = default(EntityRef<ProcessStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._ProcessStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessStatus_ProcessWorkBases", Storage="_ProcessWorkBases", ThisKey="id", OtherKey="statusId")]
		public EntitySet<ProcessWorkBases> ProcessWorkBases
		{
			get
			{
				return this._ProcessWorkBases;
			}
			set
			{
				this._ProcessWorkBases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessStatus_ProcessStatus", Storage="_ProcessStatus2", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public ProcessStatus ProcessStatus2
		{
			get
			{
				return this._ProcessStatus2.Entity;
			}
			set
			{
				ProcessStatus previousValue = this._ProcessStatus2.Entity;
				if (((previousValue != value) 
							|| (this._ProcessStatus2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProcessStatus2.Entity = null;
						previousValue.ProcessStatus1 = null;
					}
					this._ProcessStatus2.Entity = value;
					if ((value != null))
					{
						value.ProcessStatus1 = this;
					}
					this.SendPropertyChanged("ProcessStatus2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessStatus_ProcessWorks", Storage="_ProcessWorks", ThisKey="id", OtherKey="statusId")]
		public EntitySet<ProcessWorks> ProcessWorks
		{
			get
			{
				return this._ProcessWorks;
			}
			set
			{
				this._ProcessWorks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessStatus_ProcessStatus", Storage="_ProcessStatus1", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public ProcessStatus ProcessStatus1
		{
			get
			{
				return this._ProcessStatus1.Entity;
			}
			set
			{
				ProcessStatus previousValue = this._ProcessStatus1.Entity;
				if (((previousValue != value) 
							|| (this._ProcessStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProcessStatus1.Entity = null;
						previousValue.ProcessStatus2 = null;
					}
					this._ProcessStatus1.Entity = value;
					if ((value != null))
					{
						value.ProcessStatus2 = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(long);
					}
					this.SendPropertyChanged("ProcessStatus1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProcessWorkBases(ProcessWorkBases entity)
		{
			this.SendPropertyChanging();
			entity.ProcessStatus = this;
		}
		
		private void detach_ProcessWorkBases(ProcessWorkBases entity)
		{
			this.SendPropertyChanging();
			entity.ProcessStatus = null;
		}
		
		private void attach_ProcessWorks(ProcessWorks entity)
		{
			this.SendPropertyChanging();
			entity.ProcessStatus = this;
		}
		
		private void detach_ProcessWorks(ProcessWorks entity)
		{
			this.SendPropertyChanging();
			entity.ProcessStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FullView")]
	public partial class FullView
	{
		
		private long _id;
		
		private long _processWorkId;
		
		private System.Nullable<long> _organizationBaseId;
		
		private System.Nullable<long> _value;
		
		private long _statusId;
		
		private string _error;
		
		private string _comment;
		
		private System.DateTime _created;
		
		private long _Expr1;
		
		private System.DateTime _period;
		
		private long _workId;
		
		private System.Nullable<long> _ProcessWorkValue;
		
		private string _ProcessWorkComment;
		
		private long _ProcessWorkStatusId;
		
		private System.DateTime _ProcessWorkCreated;
		
		public FullView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL")]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_processWorkId", DbType="BigInt NOT NULL")]
		public long processWorkId
		{
			get
			{
				return this._processWorkId;
			}
			set
			{
				if ((this._processWorkId != value))
				{
					this._processWorkId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_organizationBaseId", DbType="BigInt")]
		public System.Nullable<long> organizationBaseId
		{
			get
			{
				return this._organizationBaseId;
			}
			set
			{
				if ((this._organizationBaseId != value))
				{
					this._organizationBaseId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="BigInt")]
		public System.Nullable<long> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this._value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusId", DbType="BigInt NOT NULL")]
		public long statusId
		{
			get
			{
				return this._statusId;
			}
			set
			{
				if ((this._statusId != value))
				{
					this._statusId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_error", DbType="VarChar(MAX)")]
		public string error
		{
			get
			{
				return this._error;
			}
			set
			{
				if ((this._error != value))
				{
					this._error = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this._comment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this._created = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr1", DbType="BigInt NOT NULL")]
		public long Expr1
		{
			get
			{
				return this._Expr1;
			}
			set
			{
				if ((this._Expr1 != value))
				{
					this._Expr1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_period", DbType="DateTime NOT NULL")]
		public System.DateTime period
		{
			get
			{
				return this._period;
			}
			set
			{
				if ((this._period != value))
				{
					this._period = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workId", DbType="BigInt NOT NULL")]
		public long workId
		{
			get
			{
				return this._workId;
			}
			set
			{
				if ((this._workId != value))
				{
					this._workId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessWorkValue", DbType="BigInt")]
		public System.Nullable<long> ProcessWorkValue
		{
			get
			{
				return this._ProcessWorkValue;
			}
			set
			{
				if ((this._ProcessWorkValue != value))
				{
					this._ProcessWorkValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessWorkComment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ProcessWorkComment
		{
			get
			{
				return this._ProcessWorkComment;
			}
			set
			{
				if ((this._ProcessWorkComment != value))
				{
					this._ProcessWorkComment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessWorkStatusId", DbType="BigInt NOT NULL")]
		public long ProcessWorkStatusId
		{
			get
			{
				return this._ProcessWorkStatusId;
			}
			set
			{
				if ((this._ProcessWorkStatusId != value))
				{
					this._ProcessWorkStatusId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessWorkCreated", DbType="DateTime NOT NULL")]
		public System.DateTime ProcessWorkCreated
		{
			get
			{
				return this._ProcessWorkCreated;
			}
			set
			{
				if ((this._ProcessWorkCreated != value))
				{
					this._ProcessWorkCreated = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SqlProcedureView")]
	public partial class SqlProcedureView
	{
		
		private string _iPadress;
		
		private long _baseId;
		
		private string _sqlProcedure;
		
		private string _dataBaseName;
		
		private long _id;
		
		public SqlProcedureView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPadress", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string iPadress
		{
			get
			{
				return this._iPadress;
			}
			set
			{
				if ((this._iPadress != value))
				{
					this._iPadress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_baseId", DbType="BigInt NOT NULL")]
		public long baseId
		{
			get
			{
				return this._baseId;
			}
			set
			{
				if ((this._baseId != value))
				{
					this._baseId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sqlProcedure", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string sqlProcedure
		{
			get
			{
				return this._sqlProcedure;
			}
			set
			{
				if ((this._sqlProcedure != value))
				{
					this._sqlProcedure = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dataBaseName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string dataBaseName
		{
			get
			{
				return this._dataBaseName;
			}
			set
			{
				if ((this._dataBaseName != value))
				{
					this._dataBaseName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL")]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="mp.ProcessWorks")]
	public partial class ProcessWorks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.DateTime _period;
		
		private long _workId;
		
		private System.Nullable<long> _value;
		
		private string _comment;
		
		private long _statusId;
		
		private System.DateTime _created;
		
		private EntitySet<ProcessWorkBases> _ProcessWorkBases;
		
		private EntityRef<ProcessStatus> _ProcessStatus;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnperiodChanging(System.DateTime value);
    partial void OnperiodChanged();
    partial void OnworkIdChanging(long value);
    partial void OnworkIdChanged();
    partial void OnvalueChanging(System.Nullable<long> value);
    partial void OnvalueChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OnstatusIdChanging(long value);
    partial void OnstatusIdChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    #endregion
		
		public ProcessWorks()
		{
			this._ProcessWorkBases = new EntitySet<ProcessWorkBases>(new Action<ProcessWorkBases>(this.attach_ProcessWorkBases), new Action<ProcessWorkBases>(this.detach_ProcessWorkBases));
			this._ProcessStatus = default(EntityRef<ProcessStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_period", DbType="DateTime NOT NULL")]
		public System.DateTime period
		{
			get
			{
				return this._period;
			}
			set
			{
				if ((this._period != value))
				{
					this.OnperiodChanging(value);
					this.SendPropertyChanging();
					this._period = value;
					this.SendPropertyChanged("period");
					this.OnperiodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workId", DbType="BigInt NOT NULL")]
		public long workId
		{
			get
			{
				return this._workId;
			}
			set
			{
				if ((this._workId != value))
				{
					this.OnworkIdChanging(value);
					this.SendPropertyChanging();
					this._workId = value;
					this.SendPropertyChanged("workId");
					this.OnworkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="BigInt")]
		public System.Nullable<long> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(MAX)")]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusId", DbType="BigInt NOT NULL")]
		public long statusId
		{
			get
			{
				return this._statusId;
			}
			set
			{
				if ((this._statusId != value))
				{
					if (this._ProcessStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIdChanging(value);
					this.SendPropertyChanging();
					this._statusId = value;
					this.SendPropertyChanged("statusId");
					this.OnstatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessWorks_ProcessWorkBases", Storage="_ProcessWorkBases", ThisKey="id", OtherKey="processWorkId")]
		public EntitySet<ProcessWorkBases> ProcessWorkBases
		{
			get
			{
				return this._ProcessWorkBases;
			}
			set
			{
				this._ProcessWorkBases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessStatus_ProcessWorks", Storage="_ProcessStatus", ThisKey="statusId", OtherKey="id", IsForeignKey=true)]
		public ProcessStatus ProcessStatus
		{
			get
			{
				return this._ProcessStatus.Entity;
			}
			set
			{
				ProcessStatus previousValue = this._ProcessStatus.Entity;
				if (((previousValue != value) 
							|| (this._ProcessStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProcessStatus.Entity = null;
						previousValue.ProcessWorks.Remove(this);
					}
					this._ProcessStatus.Entity = value;
					if ((value != null))
					{
						value.ProcessWorks.Add(this);
						this._statusId = value.id;
					}
					else
					{
						this._statusId = default(long);
					}
					this.SendPropertyChanged("ProcessStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProcessWorkBases(ProcessWorkBases entity)
		{
			this.SendPropertyChanging();
			entity.ProcessWorks = this;
		}
		
		private void detach_ProcessWorkBases(ProcessWorkBases entity)
		{
			this.SendPropertyChanging();
			entity.ProcessWorks = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="mp.ProcessWorkBaseDetails")]
	public partial class ProcessWorkBaseDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _processWorkBaseId;
		
		private string _detailName;
		
		private long _value;
		
		private System.DateTime _created;
		
		private EntityRef<ProcessWorkBases> _ProcessWorkBases;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnprocessWorkBaseIdChanging(long value);
    partial void OnprocessWorkBaseIdChanged();
    partial void OndetailNameChanging(string value);
    partial void OndetailNameChanged();
    partial void OnvalueChanging(long value);
    partial void OnvalueChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    #endregion
		
		public ProcessWorkBaseDetails()
		{
			this._ProcessWorkBases = default(EntityRef<ProcessWorkBases>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_processWorkBaseId", DbType="BigInt NOT NULL")]
		public long processWorkBaseId
		{
			get
			{
				return this._processWorkBaseId;
			}
			set
			{
				if ((this._processWorkBaseId != value))
				{
					if (this._ProcessWorkBases.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprocessWorkBaseIdChanging(value);
					this.SendPropertyChanging();
					this._processWorkBaseId = value;
					this.SendPropertyChanged("processWorkBaseId");
					this.OnprocessWorkBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detailName", DbType="NChar(10)")]
		public string detailName
		{
			get
			{
				return this._detailName;
			}
			set
			{
				if ((this._detailName != value))
				{
					this.OndetailNameChanging(value);
					this.SendPropertyChanging();
					this._detailName = value;
					this.SendPropertyChanged("detailName");
					this.OndetailNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="BigInt NOT NULL")]
		public long value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessWorkBases_ProcessWorkBaseDetails", Storage="_ProcessWorkBases", ThisKey="processWorkBaseId", OtherKey="id", IsForeignKey=true)]
		public ProcessWorkBases ProcessWorkBases
		{
			get
			{
				return this._ProcessWorkBases.Entity;
			}
			set
			{
				ProcessWorkBases previousValue = this._ProcessWorkBases.Entity;
				if (((previousValue != value) 
							|| (this._ProcessWorkBases.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProcessWorkBases.Entity = null;
						previousValue.ProcessWorkBaseDetails.Remove(this);
					}
					this._ProcessWorkBases.Entity = value;
					if ((value != null))
					{
						value.ProcessWorkBaseDetails.Add(this);
						this._processWorkBaseId = value.id;
					}
					else
					{
						this._processWorkBaseId = default(long);
					}
					this.SendPropertyChanged("ProcessWorkBases");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetWorkResult
	{
		
		private long _id;
		
		public GetWorkResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL")]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
	}
	
	public partial class GetProcedure1Result
	{
		
		private string _detailName;
		
		private int _value;
		
		public GetProcedure1Result()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detailName", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string detailName
		{
			get
			{
				return this._detailName;
			}
			set
			{
				if ((this._detailName != value))
				{
					this._detailName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Int NOT NULL")]
		public int value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this._value = value;
				}
			}
		}
	}
	
	public partial class GetProcedureResult
	{
		
		private int _value;
		
		public GetProcedureResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Int NOT NULL")]
		public int value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this._value = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
